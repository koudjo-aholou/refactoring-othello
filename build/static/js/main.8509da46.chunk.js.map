{"version":3,"sources":["utils/gameLogic.js","services/boards.js","components/Tile.js","components/Board.js","components/Home.js","services/users.js","services/login.js","App.js","serviceWorker.js","index.js"],"names":["tile","state","letters","index","initializeBoard","Board","map","row","column","rowIndex","columnIndex","name","moves","filterTiles","chosenState","FilteredTiles","push","playableTiles","turn","move","tileAround","e","isPlayable","arr","resetPlayable","baseUrl","token","a","async","response","axios","get","then","data","newObject","config","headers","Authorization","console","log","post","id","put","newToken","Tile","props","className","onClick","handleTileChange","board","useState","loggedUser","setLoggedUser","setBoard","setTurn","length","blackCount","setBlackCount","whiteCount","setWhiteCount","winner","setWinner","setPlayers","pass","setPass","passCount","setPassCount","socket","io","useEffect","BoardService","fetchedBoard","find","x","users","blackscore","whitescore","JSON","parse","localStorage","getItem","on","newBoard","active","updateBoard","newTurn","updatedBoard","emit","col","opposite","tilesToChange","possibleTiles","concat","makeMove","resetedBoard","handleReset","key","indexOf","handlePass","Home","handleGameCreation","changeName","changePassword","handleLogin","handleRegister","allBoards","handleJoinGame","changeBoardName","style","textAlign","margin","width","role","username","type","placeholder","onChange","activeBoards","filter","onSubmit","Fragment","htmlFor","title","credentials","App","game","setGame","setAllBoards","setUsername","boardName","setBoardName","password","setPassword","boardToJoin","setBoardToJoin","boardById","preventDefault","UserService","LoginService","user","setItem","stringify","setTimeout","foundBoard","to","exact","path","render","target","value","match","params","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8509da46.chunk.js","sourcesContent":["const tile = {\r\n  state: 'empty'\r\n}\r\n\r\nconst letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\r\nconst index = [0, 1, 2, 3, 4, 5, 6, 7]\r\n\r\nconst createBoard = () => index.map(row => index.map(column => {\r\n  return { ...tile, rowIndex: row, columnIndex: column, name: letters[row] + (column + 1) }\r\n}))\r\n\r\nexport const initializeBoard = () => {\r\n  const Board = createBoard()\r\n  Board[3][3].state = 'white'\r\n  Board[3][4].state = 'black'\r\n  Board[4][3].state = 'black'\r\n  Board[4][4].state = 'white'\r\n  Board[3][2].state = 'playable'\r\n  Board[2][3].state = 'playable'\r\n  Board[4][5].state = 'playable'\r\n  Board[5][4].state = 'playable'\r\n  return Board\r\n}\r\n\r\nconst isUpperLeft = (rowIndex, columnIndex, Board) => Board[rowIndex - 1][columnIndex - 1]\r\nconst isLowerLeft = (rowIndex, columnIndex, Board) => Board[rowIndex - 1][columnIndex + 1]\r\nconst isUpperRight = (rowIndex, columnIndex, Board) => Board[rowIndex + 1][columnIndex - 1]\r\nconst isLowerRight = (rowIndex, columnIndex, Board) => Board[rowIndex + 1][columnIndex + 1]\r\nconst isUpper = (rowIndex, columnIndex, Board) => Board[rowIndex][columnIndex - 1]\r\nconst isLower = (rowIndex, columnIndex, Board) => Board[rowIndex][columnIndex + 1]\r\nconst isLeft = (rowIndex, columnIndex, Board) => Board[rowIndex - 1][columnIndex]\r\nconst isRight = (rowIndex, columnIndex, Board) => Board[rowIndex + 1][columnIndex]\r\n\r\nconst moves = [isUpperLeft, isUpperRight, isLowerLeft, isLowerRight, isLower, isUpper, isLeft, isRight]\r\n\r\nexport const filterTiles = (chosenState, Board) => {\r\n  const FilteredTiles = []\r\n  Board.map(row => row.map(tile => tile.state === chosenState ? FilteredTiles.push(tile) : null))\r\n  return FilteredTiles\r\n}\r\n\r\nexport const isPlayable = (tile, turn, Board) => {\r\n  const { rowIndex, columnIndex } = tile\r\n  const playableTiles = []\r\n  moves.map(move => {\r\n    try {\r\n      let tileAround = move(rowIndex, columnIndex, Board)\r\n      if (tileAround && tileAround.state === turn) {\r\n        while (tileAround && tileAround.state === turn) {\r\n          tileAround = move(tileAround.rowIndex, tileAround.columnIndex, Board)\r\n        }\r\n        if (tileAround && tileAround.state === 'empty') {\r\n          playableTiles.push(tileAround)\r\n        }\r\n      }\r\n    } catch (e) { }\r\n  })\r\n  return playableTiles\r\n}\r\n\r\nexport const playableTiles = (turn, Board) => {\r\n  const opposite = turn === 'black' ? 'white' : 'black'\r\n  const playableTiles = []\r\n  const Tiles = filterTiles(opposite, Board)\r\n  const playableTilesArray = Tiles.map(tile => isPlayable(tile, turn, Board))\r\n  playableTilesArray.map(arr => arr.map(tile => playableTiles.push(tile)))\r\n  const tilesToPlay = playableTiles.map(tile => {\r\n    tile.state = 'playable'\r\n    return tile\r\n  })\r\n  return tilesToPlay\r\n}\r\n\r\nexport const resetPlayable = (Board) => {\r\n  const tilesToReset = filterTiles('playable', Board)\r\n  const resetedTiles = tilesToReset.map(tile => {\r\n    tile.state = 'empty'\r\n    return tile\r\n  })\r\n  return resetedTiles\r\n}\r\n\r\nexport const makeMove = (rowIndex, columnIndex, turn, Board) => {\r\n  const opposite = turn === 'black' ? 'white' : 'black'\r\n  let tilesToChange = [Board[rowIndex][columnIndex]]\r\n  moves.map(move => {\r\n    try {\r\n      let tileAround = move(rowIndex, columnIndex, Board)\r\n      const possibleTiles = [tileAround]\r\n      if (tileAround && tileAround.state === opposite) {\r\n        while (tileAround && tileAround.state === opposite) {\r\n          tileAround = move(tileAround.rowIndex, tileAround.columnIndex, Board)\r\n          possibleTiles.push(tileAround)\r\n        }\r\n        if (tileAround && tileAround.state === turn) {\r\n          tilesToChange = tilesToChange.concat(possibleTiles)\r\n        }\r\n      }\r\n    } catch (e) { }\r\n  })\r\n  tilesToChange.map(tile => {\r\n    tile.state = turn\r\n    return tile\r\n  })\r\n  return tilesToChange\r\n}\r\n","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:9000/api/boards'\r\n\r\nlet token = null\r\n\r\nconst setToken = newToken => {\r\n  token = `bearer ${newToken}`\r\n}\r\n\r\nconst getAll = async () => {\r\n  const response = axios.get(baseUrl)\r\n  return response.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const config = {\r\n    headers: { Authorization: token }\r\n  }\r\n  console.log('newObject', newObject)\r\n  const response = axios.post(baseUrl, newObject, config)\r\n  return response.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const config = {\r\n    headers: { Authorization: token }\r\n  }\r\n  const response = axios.put(`${baseUrl}/${id}`, newObject, config)\r\n  return response.then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n  const response = axios.delete(`${baseUrl}/${id}`)\r\n  return response.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, remove, setToken }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Tile = props => {\r\n  if (props.state === 'playable') {\r\n    return (\r\n      <div className=\"reversi-tile\">\r\n        <div className={props.state} name={props.name} onClick={() => props.handleTileChange(props.rowIndex, props.columnIndex)}>\r\n\r\n        </div></div>)\r\n  }\r\n\r\n  return (\r\n    <div className=\"reversi-tile\">\r\n      <div className={props.state} name={props.name} ></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nTile.propTypes = {\r\n  name: PropTypes.string,\r\n  state: PropTypes.string,\r\n  handleTileChange: PropTypes.func,\r\n  rowIndex: PropTypes.number,\r\n  columnIndex: PropTypes.number\r\n}\r\n\r\nexport default Tile\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { playableTiles, makeMove, resetPlayable, filterTiles, initializeBoard } from '../utils/gameLogic'\r\nimport BoardService from '../services/boards'\r\nimport Tile from './Tile'\r\nimport io from 'socket.io-client'\r\n\r\nconst Board = ({ board }) => {\r\n  const [loggedUser, setLoggedUser] = useState('')\r\n  const [Board, setBoard] = useState([])\r\n  const [turn, setTurn] = useState('')\r\n  const [blackCount, setBlackCount] = useState(filterTiles('black', Board).length)\r\n  const [whiteCount, setWhiteCount] = useState(filterTiles('white', Board).length)\r\n  const [winner, setWinner] = useState(false)\r\n  const [players, setPlayers] = useState([])\r\n  const [pass, setPass] = useState(false)\r\n  const [passCount, setPassCount] = useState(0)\r\n  const socket = io('http://localhost:9000')\r\n\r\n  useEffect(() => {\r\n    BoardService.getAll().then(data => {\r\n      console.log('board', board)\r\n      if (board) {\r\n        const fetchedBoard = data.find(x => x.id === board.id)\r\n        setTurn(fetchedBoard.turn)\r\n        setBoard(fetchedBoard.board)\r\n        setPlayers(fetchedBoard.users)\r\n        setBlackCount(fetchedBoard.blackscore)\r\n        setWhiteCount(fetchedBoard.whitescore)\r\n      }\r\n    })\r\n    setLoggedUser(JSON.parse(localStorage.getItem('user')))\r\n\r\n    socket.on('coucou', data => { console.log('data', data) })\r\n    socket.on('play', board => {\r\n      setBoard(board.board)\r\n      setBlackCount(board.blackscore)\r\n      setWhiteCount(board.whitescore)\r\n      setTurn(board.turn)\r\n    })\r\n  }, [board, io])\r\n\r\n  const displayBoard = () => Board.map(row => (\r\n    <div key={Board.indexOf(row)}>{row.map(tile =>\r\n      <Tile key={tile.name} {...tile} handleTileChange={handleTileChange} />\r\n    )}</div>))\r\n\r\n  const displayWinner = () => {\r\n    if (blackCount === whiteCount) {\r\n      return <h3 className=\"reversi-board\">ex-aequo, no winner!</h3>\r\n    } else {\r\n      return (blackCount > whiteCount\r\n        ? <h3 className=\"reversi-board\">Black player won!</h3>\r\n        : <h3 className=\"reversi-board\">White player won!</h3>)\r\n    }\r\n  }\r\n\r\n  // if (board && board.turn === 'black' && loggedUser.id === players[1]) {\r\n  //   const newBoard = [...Board]\r\n  //   const tilesToReset = resetPlayable(newBoard)\r\n  //   tilesToReset.map(tile => {\r\n  //     newBoard[tile.rowIndex][tile.columnIndex] = tile\r\n  //   })\r\n  //   BoardService.update(board.id, { ...Board, board: newBoard, active: false })\r\n  // }\r\n\r\n  // if (board && board.turn === 'white' && loggedUser.id === players[0]) {\r\n  //   const newBoard = [...Board]\r\n  //   const tilesToReset = resetPlayable(newBoard)\r\n  //   tilesToReset.map(tile => {\r\n  //     newBoard[tile.rowIndex][tile.columnIndex] = tile\r\n  //   })\r\n  //   BoardService.update(board.id, { ...Board, board: newBoard, active: false })\r\n  // }\r\n\r\n  // if winner, reset all tiles\r\n  if (winner) {\r\n    const newBoard = [...Board]\r\n    const tilesToReset = resetPlayable(newBoard)\r\n    tilesToReset.map(tile => {\r\n      newBoard[tile.rowIndex][tile.columnIndex] = tile\r\n    })\r\n    BoardService.update(board.id, { ...Board, board: newBoard, active: false })\r\n  }\r\n\r\n  // if too many passes, declare winner\r\n  if (filterTiles('playable', Board) && !pass) {\r\n    if (!winner && passCount === 3) {\r\n      setWinner(true)\r\n    }\r\n    setPass(true)\r\n    setPassCount(passCount + 1)\r\n  }\r\n\r\n  const updateBoard = async (newBoard) => {\r\n    const newTurn = turn === 'black' ? 'white' : 'black'\r\n    setTurn(newTurn)\r\n    BoardService.setToken(loggedUser.token)\r\n    const updatedBoard = { board: newBoard, turn: newTurn, blackscore: filterTiles('black', newBoard).length, whitescore: filterTiles('white', newBoard).length }\r\n    try {\r\n      const data = await BoardService.update(board.id, updatedBoard)\r\n      setBoard(data.board)\r\n      setBlackCount(data.blackscore)\r\n      setWhiteCount(data.whitescore)\r\n      socket.emit('play', data)\r\n    } catch (error) {\r\n      console.log('error.data', error.data)\r\n    }\r\n    const data = await BoardService.update(board.id, updatedBoard)\r\n    setBoard(data.board)\r\n    socket.emit('play', data)\r\n  }\r\n\r\n  const handleTileChange = (row, col) => {\r\n    const newBoard = [...Board]\r\n    const tilesToChange = makeMove(row, col, turn, newBoard)\r\n    tilesToChange.map(tile => {\r\n      newBoard[tile.rowIndex][tile.columnIndex] = tile\r\n    })\r\n\r\n    const tilesToReset = resetPlayable(newBoard)\r\n    tilesToReset.map(tile => {\r\n      newBoard[tile.rowIndex][tile.columnIndex] = tile\r\n    })\r\n\r\n    const PlayableTiles = playableTiles(turn, newBoard)\r\n\r\n    PlayableTiles.map(tile => {\r\n      newBoard[tile.rowIndex][tile.columnIndex] = tile\r\n    })\r\n    if (filterTiles('empty', newBoard).length + filterTiles('playable', newBoard).length < 1) {\r\n      setPass(false)\r\n      return setWinner(true)\r\n    }\r\n    updateBoard(newBoard)\r\n  }\r\n\r\n  const handlePass = () => {\r\n    setPass(false)\r\n    const newBoard = [...Board]\r\n\r\n    const tilesToReset = resetPlayable(newBoard)\r\n    tilesToReset.map(tile => {\r\n      newBoard[tile.rowIndex][tile.columnIndex] = tile\r\n    })\r\n\r\n    const PlayableTiles = playableTiles(turn, newBoard)\r\n\r\n    PlayableTiles.map(tile => {\r\n      newBoard[tile.rowIndex][tile.columnIndex] = tile\r\n    })\r\n\r\n    updateBoard(newBoard)\r\n  }\r\n\r\n  const displayPass = () => (\r\n    <button onClick={() => handlePass()}>Passer le tour</button>\r\n  )\r\n\r\n  const handleReset = () => {\r\n    const resetedBoard = {\r\n      board: initializeBoard(),\r\n      active: true,\r\n      turn: 'black'\r\n    }\r\n    BoardService.setToken(loggedUser.token)\r\n    setBoard(initializeBoard())\r\n    setTurn('black')\r\n    setWinner(false)\r\n    BoardService.update(board.id, resetedBoard)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {winner ? displayWinner() : <h3 className=\"reversi-board\">it&apos;s {turn} turn to play</h3>}\r\n      <h3 className=\"reversi-board\">Black score: {blackCount} | White score: {whiteCount}</h3>\r\n      <button onClick={() => handleReset()}>Reset Game</button>\r\n\r\n      <article className=\"reversi-board\">\r\n        {displayBoard()}\r\n\r\n      </article>\r\n      {pass ? displayPass() : null}\r\n    </>\r\n  )\r\n}\r\n\r\nBoard.propTypes = {\r\n  board: PropTypes.object\r\n}\r\n\r\nexport default Board\r\n","// eslint-disable-next-line no-unused-vars\r\nimport React, { useState, Fragment } from 'react'\r\n\r\nconst Home = ({\r\n  handleGameCreation,\r\n  changeName,\r\n  changePassword,\r\n  handleLogin,\r\n  handleRegister,\r\n  loggedUser,\r\n  allBoards,\r\n  handleJoinGame,\r\n  changeBoardName\r\n}) => {\r\n  // const [showRegister, setShowRegister] = useState(false)\r\n  // const [showLogin, setShowLogin] = useState(false)\r\n\r\n  const registerForm = () => (\r\n    <form onSubmit={handleRegister}>\r\n      <div><input type=\"text\" onChange={changeName}/></div>\r\n      <div><input type=\"password\" onChange={changePassword}/></div>\r\n      <button type=\"submit\" >Créer un compte</button>\r\n    </form>\r\n  )\r\n\r\n  const loginForm = () => (\r\n    <React.Fragment>\r\n      <h2>Connexion</h2>\r\n\r\n      <form onSubmit={handleLogin}>\r\n        <div><label htmlFor=\"username\">Pseudonyme</label><input type=\"text\" name=\"username\" title=\"Pseudonyme\" onChange={changeName}/></div>\r\n        <div><label htmlFor=\"password\">Mot de passe</label><input type=\"password\" name=\"password\" title=\"Password\" onChange={changePassword} /></div>\r\n        <button type=\"submit\">login</button>\r\n      </form>\r\n    </React.Fragment>\r\n  )\r\n\r\n  const activeBoards = () => {\r\n    const activeBoards = allBoards.filter(board => board.active)\r\n    return (activeBoards.map(board => (\r\n      <p key={board.id} >{board.name}\r\n        <button onClick={() => handleJoinGame(board.id)}>Rejoindre la partie</button></p>)))\r\n  }\r\n\r\n  if (loggedUser) {\r\n    return (\r\n      <div style={{ textAlign: 'center', margin: '30vh auto', width: '70%' }}>\r\n        <h1 role=\"welcome\">Bienvenue {loggedUser.username} !</h1>\r\n        <input type=\"text\" placeholder=\"Nom de la partie\" onChange={changeBoardName}></input>\r\n        <button onClick={() => handleGameCreation()}>Créer une partie</button>\r\n        {activeBoards()}\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <Fragment>\r\n        <h1>React Reversi Game</h1>\r\n        {registerForm()}\r\n        {loginForm()}\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home\r\n\r\nHome.propTypes = {\r\n\r\n}\r\n","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:9000/api/users'\r\n\r\nconst getAll = async () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, remove }\r\n","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:9000/api/login'\r\n\r\nconst login = async credentials => {\r\n  const response = await axios.post(baseUrl, credentials)\r\n  return response.data\r\n}\r\n\r\nexport default { login }\r\n","import React, { useState, useEffect } from 'react'\r\nimport Board from './components/Board'\r\nimport Home from './components/Home'\r\nimport BoardService from './services/boards'\r\nimport UserService from './services/users'\r\nimport LoginService from './services/login'\r\nimport { initializeBoard } from './utils/gameLogic'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Redirect\r\n} from 'react-router-dom'\r\n\r\nconst App = () => {\r\n  const [game, setGame] = useState(false)\r\n  const [allBoards, setAllBoards] = useState([])\r\n  const [loggedUser, setLoggedUser] = useState('')\r\n  const [username, setUsername] = useState('')\r\n  const [boardName, setBoardName] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [boardToJoin, setBoardToJoin] = useState([])\r\n\r\n  useEffect(() => {\r\n    // BoardService.getAll().then(data => localStorage.setItem('boards', JSON.stringify(data)))\r\n    BoardService.getAll().then(data => setAllBoards(data))\r\n    setLoggedUser(JSON.parse(localStorage.getItem('user')))\r\n  }, [])\r\n\r\n  // const boardById = (id) => {\r\n  //   const localboards = JSON.parse(localStorage.getItem('boards'))\r\n  //   return localboards.find(board => board.id === id)\r\n  // }\r\n  const boardById = (id) => allBoards.find(board => board.id === id)\r\n\r\n  const handleRegister = (e) => {\r\n    e.preventDefault()\r\n    UserService.create({ username, password })\r\n    setUsername('')\r\n    setPassword('')\r\n  }\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault()\r\n    const user = await LoginService.login({\r\n      username, password\r\n    })\r\n    localStorage.setItem('user', JSON.stringify(user))\r\n    setLoggedUser(user)\r\n    setTimeout(() => {\r\n      setUsername('')\r\n      setPassword('')\r\n    }, 200)\r\n  }\r\n\r\n  const handleGameCreation = async () => {\r\n    BoardService.setToken(loggedUser.token)\r\n    const data = await BoardService.create({ board: initializeBoard(), name: boardName })\r\n    setBoardToJoin(data)\r\n    // const localboards = JSON.parse(localStorage.getItem('boards'))\r\n    // localStorage.setItem('boards', JSON.stringify(localboards.concat(data)))\r\n    setAllBoards(allBoards.concat(data))\r\n    setTimeout(() => {\r\n      setGame(true)\r\n    }, (500))\r\n  }\r\n\r\n  const handleJoinGame = async (id) => {\r\n    UserService.update(loggedUser.id, { board: id })\r\n    const foundBoard = allBoards.find(board => board.id === id)\r\n    setBoardToJoin(foundBoard)\r\n    setTimeout(() => {\r\n      setGame(true)\r\n    }, (500))\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        {game ? <Redirect to={`game/${boardToJoin.id}`} /> : null}\r\n\r\n        <Route exact path=\"/\" render={() => <Home\r\n          handleRegister={handleRegister}\r\n          handleLogin={handleLogin}\r\n          handleGameCreation={handleGameCreation}\r\n          loggedUser={loggedUser}\r\n          allBoards={allBoards}\r\n          changeBoardName={({ target }) => setBoardName(target.value)}\r\n          changeName={({ target }) => setUsername(target.value)}\r\n          handleJoinGame={handleJoinGame}\r\n          changePassword={({ target }) => setPassword(target.value)} />}\r\n        />\r\n\r\n        <Route exact path=\"/game/:id\" render={({ match }) => {\r\n          console.log('boardById', boardById(match.params.id))\r\n          return (\r\n            <Board board={boardById(match.params.id)} />\r\n          )\r\n        }\r\n        } />\r\n\r\n      </div>\r\n    </Router>\r\n\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.scss'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}
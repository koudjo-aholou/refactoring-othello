{"version":3,"sources":["utils/gameLogic.js","services/boards.js","services/users.js","components/Tile.js","components/Board.js","components/Home.js","services/login.js","App.js","serviceWorker.js","index.js"],"names":["tile","state","letters","index","initializeBoard","Board","map","row","column","rowIndex","columnIndex","name","moves","filterTiles","chosenState","FilteredTiles","push","playableTiles","turn","move","tileAround","e","isPlayable","arr","resetPlayable","baseUrl","token","a","async","response","axios","get","then","data","newObject","config","headers","Authorization","console","log","post","id","put","newToken","Tile","props","className","onClick","handlePlayTurn","board","socket","useState","loggedUser","setLoggedUser","setBoard","setTurn","length","blackCount","setBlackCount","whiteCount","setWhiteCount","winner","setWinner","setPlayers","pass","setPass","message","setMessage","passCount","setPassCount","useEffect","BoardService","fetchedBoard","find","x","users","blackscore","whitescore","playerBoard","JSON","parse","localStorage","getItem","on","winnerBoard","active","updateBoard","newBoard","newTurn","updatedBoard","emit","col","opposite","tilesToChange","possibleTiles","concat","makeMove","role","width","height","viewBox","fill","xmlns","fillRule","d","clipRule","displayMessage","resetedBoard","handleReset","key","indexOf","username","passBoard","handlePass","Home","handleGameCreation","changeName","changePassword","handleLogin","handleRegister","allBoards","handleJoinGame","changeBoardName","style","textAlign","margin","type","placeholder","onChange","activeBoards","filter","onSubmit","Fragment","htmlFor","title","credentials","App","game","setGame","setAllBoards","setUsername","boardName","setBoardName","password","setPassword","boardToJoin","setBoardToJoin","io","preventDefault","UserService","LoginService","user","setItem","stringify","setTimeout","foundBoard","to","exact","path","render","target","value","match","params","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.210427a0.chunk.js","sourcesContent":["const tile = {\r\n  state: 'empty'\r\n}\r\n\r\nconst letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\r\nconst index = [0, 1, 2, 3, 4, 5, 6, 7]\r\n\r\nconst createBoard = () => index.map(row => index.map(column => {\r\n  return { ...tile, rowIndex: row, columnIndex: column, name: letters[row] + (column + 1) }\r\n}))\r\n\r\nexport const initializeBoard = () => {\r\n  const Board = createBoard()\r\n  Board[3][3].state = 'white'\r\n  Board[3][4].state = 'black'\r\n  Board[4][3].state = 'black'\r\n  Board[4][4].state = 'white'\r\n  return Board\r\n}\r\n\r\nconst isUpperLeft = (rowIndex, columnIndex, Board) => Board[rowIndex - 1][columnIndex - 1]\r\nconst isLowerLeft = (rowIndex, columnIndex, Board) => Board[rowIndex - 1][columnIndex + 1]\r\nconst isUpperRight = (rowIndex, columnIndex, Board) => Board[rowIndex + 1][columnIndex - 1]\r\nconst isLowerRight = (rowIndex, columnIndex, Board) => Board[rowIndex + 1][columnIndex + 1]\r\nconst isUpper = (rowIndex, columnIndex, Board) => Board[rowIndex][columnIndex - 1]\r\nconst isLower = (rowIndex, columnIndex, Board) => Board[rowIndex][columnIndex + 1]\r\nconst isLeft = (rowIndex, columnIndex, Board) => Board[rowIndex - 1][columnIndex]\r\nconst isRight = (rowIndex, columnIndex, Board) => Board[rowIndex + 1][columnIndex]\r\n\r\nconst moves = [isUpperLeft, isUpperRight, isLowerLeft, isLowerRight, isLower, isUpper, isLeft, isRight]\r\n\r\nexport const filterTiles = (chosenState, Board) => {\r\n  const FilteredTiles = []\r\n  Board.map(row => row.map(tile => tile.state === chosenState ? FilteredTiles.push(tile) : null))\r\n  return FilteredTiles\r\n}\r\n\r\nexport const isPlayable = (tile, turn, Board) => {\r\n  const { rowIndex, columnIndex } = tile\r\n  const playableTiles = []\r\n  moves.map(move => {\r\n    try {\r\n      let tileAround = move(rowIndex, columnIndex, Board)\r\n      if (tileAround && tileAround.state === turn) {\r\n        while (tileAround && tileAround.state === turn) {\r\n          tileAround = move(tileAround.rowIndex, tileAround.columnIndex, Board)\r\n        }\r\n        if (tileAround && tileAround.state === 'empty') {\r\n          playableTiles.push(tileAround)\r\n        }\r\n      }\r\n    } catch (e) { }\r\n  })\r\n  return playableTiles\r\n}\r\n\r\nexport const playableTiles = (turn, Board) => {\r\n  const opposite = turn === 'black' ? 'white' : 'black'\r\n  const playableTiles = []\r\n  const Tiles = filterTiles(opposite, Board)\r\n  const playableTilesArray = Tiles.map(tile => isPlayable(tile, turn, Board))\r\n  playableTilesArray.map(arr => arr.map(tile => playableTiles.push(tile)))\r\n  const tilesToPlay = playableTiles.map(tile => {\r\n    tile.state = 'playable'\r\n    return tile\r\n  })\r\n  return tilesToPlay\r\n}\r\n\r\nexport const resetPlayable = (Board) => {\r\n  const tilesToReset = filterTiles('playable', Board)\r\n  const resetedTiles = tilesToReset.map(tile => {\r\n    tile.state = 'empty'\r\n    return tile\r\n  })\r\n  return resetedTiles\r\n}\r\n\r\nexport const makeMove = (rowIndex, columnIndex, turn, Board) => {\r\n  const opposite = turn === 'black' ? 'white' : 'black'\r\n  let tilesToChange = [Board[rowIndex][columnIndex]]\r\n  moves.map(move => {\r\n    try {\r\n      let tileAround = move(rowIndex, columnIndex, Board)\r\n      const possibleTiles = [tileAround]\r\n      if (tileAround && tileAround.state === opposite) {\r\n        while (tileAround && tileAround.state === opposite) {\r\n          tileAround = move(tileAround.rowIndex, tileAround.columnIndex, Board)\r\n          possibleTiles.push(tileAround)\r\n        }\r\n        if (tileAround && tileAround.state === turn) {\r\n          tilesToChange = tilesToChange.concat(possibleTiles)\r\n        }\r\n      }\r\n    } catch (e) { }\r\n  })\r\n  tilesToChange.map(tile => {\r\n    tile.state = turn\r\n    return tile\r\n  })\r\n  return tilesToChange\r\n}\r\n","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:5000/api/boards'\r\n\r\nlet token = null\r\n\r\nconst setToken = newToken => {\r\n  token = `bearer ${newToken}`\r\n}\r\n\r\nconst getAll = async () => {\r\n  const response = axios.get(baseUrl)\r\n  return response.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const config = {\r\n    headers: { Authorization: token }\r\n  }\r\n  console.log('newObject', newObject)\r\n  const response = axios.post(baseUrl, newObject, config)\r\n  return response.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const config = {\r\n    headers: { Authorization: token }\r\n  }\r\n  console.log('newObject', newObject)\r\n  const response = axios.put(`${baseUrl}/${id}`, newObject, config)\r\n  return response.then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n  const response = axios.delete(`${baseUrl}/${id}`)\r\n  return response.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, remove, setToken }\r\n","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:5000/api/users'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst getOne = id => {\r\n  const request = axios.get(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, getOne, create, update, remove }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Tile = props => {\r\n  if (props.state === 'playable') {\r\n    return (\r\n      <div className=\"reversi-tile\">\r\n        <div className={props.state} name={props.name} onClick={() => props.handlePlayTurn(props.rowIndex, props.columnIndex)}>\r\n\r\n        </div></div>)\r\n  }\r\n\r\n  return (\r\n    <div className=\"reversi-tile\">\r\n      <div className={props.state} name={props.name} ></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nTile.propTypes = {\r\n  name: PropTypes.string,\r\n  state: PropTypes.string,\r\n  handlePlayTurn: PropTypes.func,\r\n  rowIndex: PropTypes.number,\r\n  columnIndex: PropTypes.number\r\n}\r\n\r\nexport default Tile\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { playableTiles, makeMove, resetPlayable, filterTiles, initializeBoard } from '../utils/gameLogic'\r\nimport BoardService from '../services/boards'\r\nimport UserService from '../services/users'\r\nimport Tile from './Tile'\r\n\r\nconst Board = ({ board, socket }) => {\r\n  const [loggedUser, setLoggedUser] = useState('')\r\n  const [Board, setBoard] = useState([])\r\n  const [turn, setTurn] = useState('')\r\n  const [blackCount, setBlackCount] = useState(filterTiles('black', Board).length)\r\n  const [whiteCount, setWhiteCount] = useState(filterTiles('white', Board).length)\r\n  const [winner, setWinner] = useState(false)\r\n  const [players, setPlayers] = useState([])\r\n  const [pass, setPass] = useState(false)\r\n  const [message, setMessage] = useState('')\r\n  const [passCount, setPassCount] = useState(0)\r\n\r\n  useEffect(() => {\r\n    BoardService.getAll().then(data => {\r\n      if (board) {\r\n        const fetchedBoard = data.find(x => x.id === board.id)\r\n        setTurn(fetchedBoard.turn)\r\n        setPlayers(fetchedBoard.users)\r\n        setBlackCount(fetchedBoard.blackscore)\r\n        setWhiteCount(fetchedBoard.whitescore)\r\n        if (fetchedBoard.turn === 'black' && loggedUser.id === fetchedBoard.users[0].id) {\r\n          const playerBoard = [...fetchedBoard.board]\r\n          const PlayableTiles = playableTiles('white', playerBoard)\r\n\r\n          PlayableTiles.map(tile => {\r\n            playerBoard[tile.rowIndex][tile.columnIndex] = tile\r\n          })\r\n          setBoard(playerBoard)\r\n        } else {\r\n          setBoard(fetchedBoard.board)\r\n        }\r\n\r\n        if (fetchedBoard.turn === 'white' && loggedUser.id === fetchedBoard.users[1].id) {\r\n          const playerBoard = [...fetchedBoard.board]\r\n          const PlayableTiles = playableTiles('black', playerBoard)\r\n\r\n          PlayableTiles.map(tile => {\r\n            playerBoard[tile.rowIndex][tile.columnIndex] = tile\r\n          })\r\n          setBoard(playerBoard)\r\n        } else {\r\n          setBoard(fetchedBoard.board)\r\n        }\r\n\r\n        if (filterTiles('empty', fetchedBoard.board).length + filterTiles('playable', fetchedBoard.board).length < 1) {\r\n          setPass(false)\r\n          return setWinner(true)\r\n        }\r\n      }\r\n    })\r\n    setLoggedUser(JSON.parse(localStorage.getItem('user')))\r\n    socket.on('play', board => {\r\n      setBoard(board.board)\r\n      setBlackCount(board.blackscore)\r\n      setWhiteCount(board.whitescore)\r\n      setTurn(board.turn)\r\n      setMessage(\"L'adversaire vient de jouer un coup !\")\r\n    })\r\n  }, [board, blackCount])\r\n\r\n  // if winner, reset all tiles\r\n  if (winner) {\r\n    const winnerBoard = [...Board]\r\n    const tilesToReset = resetPlayable(winnerBoard)\r\n    tilesToReset.map(tile => {\r\n      winnerBoard[tile.rowIndex][tile.columnIndex] = tile\r\n    })\r\n    BoardService.update(board.id, { ...Board, board: winnerBoard, active: false })\r\n  }\r\n\r\n  // if too many passes, declare winner\r\n  if (filterTiles('playable', Board) && !pass) {\r\n    if (!winner && passCount === 3) {\r\n      setWinner(true)\r\n    }\r\n    setPass(true)\r\n    setPassCount(passCount + 1)\r\n  }\r\n\r\n  const updateBoard = async (newBoard) => {\r\n    const newTurn = turn === 'black' ? 'white' : 'black'\r\n    BoardService.setToken(loggedUser.token)\r\n    const updatedBoard = { board: newBoard, turn: newTurn, blackscore: filterTiles('black', newBoard).length, whitescore: filterTiles('white', newBoard).length }\r\n    try {\r\n      const data = await BoardService.update(board.id, updatedBoard)\r\n      setBoard(data.board)\r\n      setBlackCount(data.blackscore)\r\n      setWhiteCount(data.whitescore)\r\n      socket.emit('play', data)\r\n    } catch (error) {\r\n      console.log('error.data', error.data)\r\n    }\r\n  }\r\n\r\n  const handlePlayTurn = (row, col) => {\r\n    const newBoard = [...Board]\r\n    const tilesToChange = makeMove(row, col, turn, newBoard)\r\n    tilesToChange.map(tile => {\r\n      newBoard[tile.rowIndex][tile.columnIndex] = tile\r\n    })\r\n\r\n    const tilesToReset = resetPlayable(newBoard)\r\n    tilesToReset.map(tile => {\r\n      newBoard[tile.rowIndex][tile.columnIndex] = tile\r\n    })\r\n\r\n    updateBoard(newBoard)\r\n  }\r\n\r\n  const handleReset = async () => {\r\n    const resetedBoard = {\r\n      board: initializeBoard(),\r\n      active: true,\r\n      turn: 'black'\r\n    }\r\n    BoardService.setToken(loggedUser.token)\r\n    setBoard(initializeBoard())\r\n    setWinner(false)\r\n    const data = await BoardService.update(board.id, resetedBoard)\r\n    socket.emit('play', data)\r\n  }\r\n\r\n  const handlePass = () => {\r\n    setPass(false)\r\n    const passBoard = [...Board]\r\n\r\n    const tilesToReset = resetPlayable(passBoard)\r\n    tilesToReset.map(tile => {\r\n      passBoard[tile.rowIndex][tile.columnIndex] = tile\r\n    })\r\n\r\n    updateBoard(passBoard)\r\n  }\r\n\r\n  const displayMessage = (message) => (<div className=\"alert alert-primary\" role=\"alert\">{message} <svg onClick={() => setMessage(false)} className=\"bi bi-x-square\" width=\"1em\" height=\"1em\" viewBox=\"0 0 20 20\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path fillRule=\"evenodd\" d=\"M16 3H4a1 1 0 00-1 1v12a1 1 0 001 1h12a1 1 0 001-1V4a1 1 0 00-1-1zM4 2a2 2 0 00-2 2v12a2 2 0 002 2h12a2 2 0 002-2V4a2 2 0 00-2-2H4z\" clipRule=\"evenodd\"></path>\r\n    <path fillRule=\"evenodd\" d=\"M9.293 10L6.646 7.354l.708-.708L10 9.293l2.646-2.647.708.708L10.707 10l2.647 2.646-.708.708L10 10.707l-2.646 2.647-.708-.707L9.293 10z\" clipRule=\"evenodd\" ></path>\r\n  </svg>\r\n\r\n  </div>)\r\n\r\n  const displayBoard = () => Board.map(row => (\r\n    <div key={Board.indexOf(row)}>{row.map(tile =>\r\n      <Tile key={tile.name} {...tile} handlePlayTurn={handlePlayTurn} />\r\n    )}</div>))\r\n\r\n  const displayWinner = () => {\r\n    if (blackCount === whiteCount) {\r\n      return <h3 className=\"reversi-board\">ex-aequo, no winner!</h3>\r\n    } else {\r\n      return (blackCount > whiteCount\r\n        ? <h3 className=\"reversi-board\">Black player won!</h3>\r\n        : <h3 className=\"reversi-board\">White player won!</h3>)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      {winner ? displayWinner() : <h3 className=\"reversi-board\">it&apos;s {turn} turn to play</h3>}\r\n      <h3 className=\"reversi-board\">Black score: {blackCount} | White score: {whiteCount}</h3>\r\n      {message ? displayMessage(message) : null}\r\n\r\n      <article className=\"reversi-board\">\r\n        <button onClick={() => handleReset()}>Reset Game</button>\r\n        {displayBoard()}\r\n        <div className=\"player-names\">\r\n          <p>{board && board.users[0] ? board.users[0].username : 'En attende du joueur'}</p>\r\n          <button onClick={() => handlePass()}>Passer le tour</button>\r\n          <p>{board && board.users[1] ? board.users[1].username : 'En attende du joueur'}</p>\r\n        </div>\r\n\r\n      </article>\r\n    </main>\r\n  )\r\n}\r\n\r\nBoard.propTypes = {\r\n  board: PropTypes.object,\r\n  socket: PropTypes.object\r\n}\r\n\r\nexport default Board\r\n","// eslint-disable-next-line no-unused-vars\r\nimport React, { useState, Fragment } from 'react'\r\n\r\nconst Home = ({\r\n  handleGameCreation,\r\n  changeName,\r\n  changePassword,\r\n  handleLogin,\r\n  handleRegister,\r\n  loggedUser,\r\n  allBoards,\r\n  handleJoinGame,\r\n  changeBoardName\r\n}) => {\r\n  // const [showRegister, setShowRegister] = useState(false)\r\n  // const [showLogin, setShowLogin] = useState(false)\r\n\r\n  const registerForm = () => (\r\n    <form onSubmit={handleRegister}>\r\n      <div><input type=\"text\" onChange={changeName}/></div>\r\n      <div><input type=\"password\" onChange={changePassword}/></div>\r\n      <button type=\"submit\" >Créer un compte</button>\r\n    </form>\r\n  )\r\n\r\n  const loginForm = () => (\r\n    <React.Fragment>\r\n      <h2>Connexion</h2>\r\n\r\n      <form onSubmit={handleLogin}>\r\n        <div><label htmlFor=\"username\">Pseudonyme</label><input type=\"text\" name=\"username\" title=\"Pseudonyme\" onChange={changeName}/></div>\r\n        <div><label htmlFor=\"password\">Mot de passe</label><input type=\"password\" name=\"password\" title=\"Password\" onChange={changePassword} /></div>\r\n        <button type=\"submit\">login</button>\r\n      </form>\r\n    </React.Fragment>\r\n  )\r\n\r\n  const activeBoards = () => {\r\n    const activeBoards = allBoards.filter(board => board.active)\r\n    return (activeBoards.map(board => (\r\n      <p key={board.id} >{board.name}\r\n        <button onClick={() => handleJoinGame(board.id)}>Rejoindre la partie</button></p>)))\r\n  }\r\n\r\n  if (loggedUser) {\r\n    return (\r\n      <div style={{ textAlign: 'center', margin: '30vh auto', width: '70%' }}>\r\n        <h1 role=\"welcome\">Bienvenue {loggedUser.username} !</h1>\r\n        <input type=\"text\" placeholder=\"Nom de la partie\" onChange={changeBoardName}></input>\r\n        <button onClick={() => handleGameCreation()}>Créer une partie</button>\r\n        {activeBoards()}\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <Fragment>\r\n        <h1>React Reversi Game</h1>\r\n        {registerForm()}\r\n        {loginForm()}\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home\r\n\r\nHome.propTypes = {\r\n\r\n}\r\n","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:5000/api/login'\r\n\r\nconst login = async credentials => {\r\n  const response = await axios.post(baseUrl, credentials)\r\n  return response.data\r\n}\r\n\r\nexport default { login }\r\n","import React, { useState, useEffect } from 'react'\r\nimport Board from './components/Board'\r\nimport Home from './components/Home'\r\nimport BoardService from './services/boards'\r\nimport UserService from './services/users'\r\nimport io from 'socket.io-client'\r\nimport LoginService from './services/login'\r\nimport { initializeBoard } from './utils/gameLogic'\r\nimport {\r\n  HashRouter as Router,\r\n  Route,\r\n  Redirect\r\n} from 'react-router-dom'\r\n\r\nconst App = () => {\r\n  const [game, setGame] = useState(false)\r\n  const [allBoards, setAllBoards] = useState([])\r\n  const [loggedUser, setLoggedUser] = useState('')\r\n  const [username, setUsername] = useState('')\r\n  const [boardName, setBoardName] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [boardToJoin, setBoardToJoin] = useState([])\r\n  const [socket] = useState(io('http://localhost:5000'))\r\n\r\n  useEffect(() => {\r\n    // BoardService.getAll().then(data => localStorage.setItem('boards', JSON.stringify(data)))\r\n    BoardService.getAll().then(data => setAllBoards(data))\r\n    setLoggedUser(JSON.parse(localStorage.getItem('user')))\r\n  }, [])\r\n\r\n  // const boardById = (id) => {\r\n  //   const localboards = JSON.parse(localStorage.getItem('boards'))\r\n  //   return localboards.find(board => board.id === id)\r\n  // }\r\n  const boardById = (id) => allBoards.find(board => board.id === id)\r\n\r\n  const handleRegister = (e) => {\r\n    e.preventDefault()\r\n    UserService.create({ username, password })\r\n    setUsername('')\r\n    setPassword('')\r\n  }\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault()\r\n    const user = await LoginService.login({\r\n      username, password\r\n    })\r\n    localStorage.setItem('user', JSON.stringify(user))\r\n    setLoggedUser(user)\r\n    setTimeout(() => {\r\n      setUsername('')\r\n      setPassword('')\r\n    }, 200)\r\n  }\r\n\r\n  const handleGameCreation = async () => {\r\n    BoardService.setToken(loggedUser.token)\r\n    const data = await BoardService.create({ board: initializeBoard(), name: boardName })\r\n    setBoardToJoin(data)\r\n    // const localboards = JSON.parse(localStorage.getItem('boards'))\r\n    // localStorage.setItem('boards', JSON.stringify(localboards.concat(data)))\r\n    setAllBoards(allBoards.concat(data))\r\n    setTimeout(() => {\r\n      setGame(true)\r\n    }, (500))\r\n  }\r\n\r\n  const handleJoinGame = async (id) => {\r\n    UserService.update(loggedUser.id, { board: id })\r\n    const foundBoard = allBoards.find(board => board.id === id)\r\n    setBoardToJoin(foundBoard)\r\n    setTimeout(() => {\r\n      setGame(true)\r\n    }, (500))\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        {game ? <Redirect to={`game/${boardToJoin.id}`} /> : null}\r\n\r\n        <Route exact path=\"/\" render={() => <Home\r\n          handleRegister={handleRegister}\r\n          handleLogin={handleLogin}\r\n          handleGameCreation={handleGameCreation}\r\n          loggedUser={loggedUser}\r\n          allBoards={allBoards}\r\n          changeBoardName={({ target }) => setBoardName(target.value)}\r\n          changeName={({ target }) => setUsername(target.value)}\r\n          handleJoinGame={handleJoinGame}\r\n          changePassword={({ target }) => setPassword(target.value)} />}\r\n        />\r\n\r\n        <Route exact path=\"/game/:id\" render={({ match }) => <Board board={boardById(match.params.id)} socket={socket} />\r\n        } />\r\n\r\n      </div>\r\n    </Router>\r\n\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.scss'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}